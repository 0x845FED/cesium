diff --git a/Source/Core/Matrix3.js b/Source/Core/Matrix3.js
index f01c549fc6..31600e10a5 100644
--- a/Source/Core/Matrix3.js
+++ b/Source/Core/Matrix3.js
@@ -1363,6 +1363,25 @@ Matrix3.inverse = function (matrix, result) {
   return Matrix3.multiplyByScalar(result, scale, result);
 };
 
+var scratchInverseMatrix = new Matrix3();
+
+/**
+ * Computes the matrix that is used to transform normal vector
+ *
+ * @param {Matrix3} matrix The matrix to invert and transpose.
+ * @param {Matrix3} result The object onto which to store the result.
+ * @returns {Matrix3} The modified result parameter.
+ */
+Matrix3.transposeInverse = function (matrix, result)
+{
+  //>>includeStart('debug', pragmas.debug);
+  Check.typeOf.object("matrix", matrix);
+  Check.typeOf.object("result", result);
+  //>>includeEnd('debug');
+
+  return Matrix3.transpose(Matrix3.inverse(matrix, scratchInverseMatrix), result);
+}
+
 /**
  * Compares the provided matrices componentwise and returns
  * <code>true</code> if they are equal, <code>false</code> otherwise.
diff --git a/Source/Core/Matrix4.js b/Source/Core/Matrix4.js
index 1d9d536208..cb12b265dc 100644
--- a/Source/Core/Matrix4.js
+++ b/Source/Core/Matrix4.js
@@ -2647,6 +2647,25 @@ Matrix4.inverseTransformation = function (matrix, result) {
   return result;
 };
 
+var scratchInverseMatrix = new Matrix4();
+
+/**
+ * Computes the matrix that is used to transform normal vector
+ *
+ * @param {Matrix4} matrix The matrix to invert and transpose.
+ * @param {Matrix4} result The object onto which to store the result.
+ * @returns {Matrix4} The modified result parameter.
+ */
+Matrix4.transposeInverse = function (matrix, result)
+{
+  //>>includeStart('debug', pragmas.debug);
+  Check.typeOf.object("matrix", matrix);
+  Check.typeOf.object("result", result);
+  //>>includeEnd('debug');
+
+  return Matrix4.transpose(Matrix4.inverse(matrix, scratchInverseMatrix), result);
+}
+
 /**
  * An immutable Matrix4 instance initialized to the identity matrix.
  *
diff --git a/Source/Core/Plane.js b/Source/Core/Plane.js
index 5638d11b9b..41a5329757 100644
--- a/Source/Core/Plane.js
+++ b/Source/Core/Plane.js
@@ -4,6 +4,7 @@ import defined from "./defined.js";
 import DeveloperError from "./DeveloperError.js";
 import CesiumMath from "./Math.js";
 import Matrix4 from "./Matrix4.js";
+import Cartesian4 from "./Cartesian4.js";
 
 /**
  * A plane in Hessian Normal Form defined by
@@ -192,7 +193,9 @@ Plane.projectPointOntoPlane = function (plane, point, result) {
   return Cartesian3.subtract(point, scaledNormal, result);
 };
 
-var scratchPosition = new Cartesian3();
+var scratchTransposeInverse = new Matrix4();
+var scratchPlaneCartesian4 = new Cartesian4();
+var scratchTransformNormal = new Cartesian3();
 /**
  * Transforms the plane by the given transformation matrix.
  *
@@ -207,13 +210,18 @@ Plane.transform = function (plane, transform, result) {
   Check.typeOf.object("transform", transform);
   //>>includeEnd('debug');
 
-  Matrix4.multiplyByPointAsVector(transform, plane.normal, scratchNormal);
-  Cartesian3.normalize(scratchNormal, scratchNormal);
+  var normal = plane.normal;
+  var distance = plane.distance;
+  var transposeInverse = Matrix4.transposeInverse(transform, scratchTransposeInverse);
+  var planeAsCartesian4 = Cartesian4.fromElements(normal.x, normal.y, normal.z, distance, scratchPlaneCartesian4); 
+  planeAsCartesian4 = Matrix4.multiplyByVector(transposeInverse, planeAsCartesian4, planeAsCartesian4);
 
-  Cartesian3.multiplyByScalar(plane.normal, -plane.distance, scratchPosition);
-  Matrix4.multiplyByPoint(transform, scratchPosition, scratchPosition);
+  // Convert the transformed plane to Hessian normal form
+  var transformNormal = Cartesian3.fromCartesian4(planeAsCartesian4, scratchTransformNormal); 
+  var inverseTransformNormalMagnitude = 1.0/Cartesian3.magnitude(transformNormal);
+  planeAsCartesian4 = Cartesian4.multiplyByScalar(planeAsCartesian4, inverseTransformNormalMagnitude, planeAsCartesian4);
 
-  return Plane.fromPointNormal(scratchPosition, scratchNormal, result);
+  return Plane.fromCartesian4(planeAsCartesian4, result);
 };
 
 /**
